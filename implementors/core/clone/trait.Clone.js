(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Clone for Adler32","synthetic":false,"types":[]}];
implementors["aes_soft"] = [{"text":"impl Clone for Aes128","synthetic":false,"types":[]},{"text":"impl Clone for Aes192","synthetic":false,"types":[]},{"text":"impl Clone for Aes256","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["async_compression"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for PrintFmt","synthetic":false,"types":[]},{"text":"impl Clone for Backtrace","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceFrame","synthetic":false,"types":[]},{"text":"impl Clone for BacktraceSymbol","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for CharacterSet","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize:&nbsp;Clone + ArrayLength&lt;u8&gt;&gt; Clone for BlockBuffer&lt;BlockSize&gt;","synthetic":false,"types":[]}];
implementors["block_cipher"] = [{"text":"impl Clone for InvalidKeyLength","synthetic":false,"types":[]}];
implementors["block_modes"] = [{"text":"impl Clone for BlockModeError","synthetic":false,"types":[]},{"text":"impl Clone for InvalidKeyIvLength","synthetic":false,"types":[]}];
implementors["block_padding"] = [{"text":"impl Clone for PadError","synthetic":false,"types":[]},{"text":"impl Clone for UnpadError","synthetic":false,"types":[]}];
implementors["blowfish"] = [{"text":"impl&lt;T:&nbsp;Clone + ByteOrder&gt; Clone for Blowfish&lt;T&gt;","synthetic":false,"types":[]}];
implementors["buf_redux"] = [{"text":"impl Clone for DoRead","synthetic":false,"types":[]},{"text":"impl Clone for FlushAmt","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Clone for Bytes","synthetic":false,"types":[]},{"text":"impl Clone for BytesMut","synthetic":false,"types":[]}];
implementors["cast5"] = [{"text":"impl Clone for Cast5","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RoundingError","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]},{"text":"impl Clone for Month","synthetic":false,"types":[]},{"text":"impl Clone for ParseMonthError","synthetic":false,"types":[]}];
implementors["circular"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["clear_on_drop"] = [{"text":"impl&lt;P&gt; Clone for ClearOnDrop&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: DerefMut + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P::Target: Clear,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["crc24"] = [{"text":"impl Clone for Crc24Hasher","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["curl"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ShareError","synthetic":false,"types":[]},{"text":"impl Clone for MultiError","synthetic":false,"types":[]},{"text":"impl Clone for FormError","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Protocols&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ProxyType","synthetic":false,"types":[]},{"text":"impl Clone for TimeCondition","synthetic":false,"types":[]},{"text":"impl Clone for IpResolve","synthetic":false,"types":[]},{"text":"impl Clone for HttpVersion","synthetic":false,"types":[]},{"text":"impl Clone for SslVersion","synthetic":false,"types":[]},{"text":"impl Clone for SeekResult","synthetic":false,"types":[]},{"text":"impl Clone for InfoType","synthetic":false,"types":[]},{"text":"impl Clone for NetRc","synthetic":false,"types":[]},{"text":"impl Clone for Auth","synthetic":false,"types":[]},{"text":"impl Clone for SslOpt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["curve25519_dalek"] = [{"text":"impl Clone for Scalar","synthetic":false,"types":[]},{"text":"impl Clone for MontgomeryPoint","synthetic":false,"types":[]},{"text":"impl Clone for CompressedEdwardsY","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsPoint","synthetic":false,"types":[]},{"text":"impl Clone for EdwardsBasepointTable","synthetic":false,"types":[]},{"text":"impl Clone for CompressedRistretto","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoPoint","synthetic":false,"types":[]},{"text":"impl Clone for RistrettoBasepointTable","synthetic":false,"types":[]}];
implementors["darling_core"] = [{"text":"impl&lt;V:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Data&lt;V, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Fields&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, L:&nbsp;Clone, C:&nbsp;Clone&gt; Clone for GenericParam&lt;T, L, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone, W:&nbsp;Clone&gt; Clone for Generics&lt;P, W&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Purpose","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl Clone for IdentString","synthetic":false,"types":[]},{"text":"impl Clone for Ignored","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Override&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PathList","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, O:&nbsp;Clone&gt; Clone for WithOriginal&lt;T, O&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for SpannedValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]}];
implementors["derive_builder_core"] = [{"text":"impl Clone for Bindings","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BuilderField&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DeprecationNotes","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Initializer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BuilderPattern","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Setter&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["des"] = [{"text":"impl Clone for Des","synthetic":false,"types":[]},{"text":"impl Clone for TdesEde3","synthetic":false,"types":[]},{"text":"impl Clone for TdesEee3","synthetic":false,"types":[]},{"text":"impl Clone for TdesEde2","synthetic":false,"types":[]},{"text":"impl Clone for TdesEee2","synthetic":false,"types":[]}];
implementors["digest"] = [{"text":"impl Clone for InvalidOutputSize","synthetic":false,"types":[]}];
implementors["download"] = [{"text":"impl Clone for Backend","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Event&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["ed25519"] = [{"text":"impl Clone for Signature","synthetic":false,"types":[]}];
implementors["ed25519_dalek"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Clone for FileTime","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Clone for GzHeader","synthetic":false,"types":[]},{"text":"impl Clone for FlushCompress","synthetic":false,"types":[]},{"text":"impl Clone for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl Clone for SendError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Canceled","synthetic":false,"types":[]}];
implementors["futures_executor"] = [{"text":"impl Clone for LocalSpawner","synthetic":false,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Clone for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Clone&gt; Clone for OptionFuture&lt;F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for Either&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Fut:&nbsp;Clone&gt; Clone for Abortable&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AbortHandle","synthetic":false,"types":[]},{"text":"impl Clone for Aborted","synthetic":false,"types":[]},{"text":"impl&lt;Si:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for SinkMapErr&lt;Si, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AllowStdIo&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cursor&lt;T&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["gimli"] = [{"text":"impl Clone for Format","synthetic":false,"types":[]},{"text":"impl Clone for Encoding","synthetic":false,"types":[]},{"text":"impl Clone for LineEncoding","synthetic":false,"types":[]},{"text":"impl Clone for Register","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAbbrevOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugAddrIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugInfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLineStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocationListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugLocListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacinfoOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugMacroOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RangeListsOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugRngListsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsBase&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugStrOffsetsIndex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugTypesOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DebugTypeSignature","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DebugFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for EhFrameOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitSectionOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SectionId","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for X86","synthetic":false,"types":[]},{"text":"impl Clone for X86_64","synthetic":false,"types":[]},{"text":"impl Clone for DwUt","synthetic":false,"types":[]},{"text":"impl Clone for DwCfa","synthetic":false,"types":[]},{"text":"impl Clone for DwChildren","synthetic":false,"types":[]},{"text":"impl Clone for DwTag","synthetic":false,"types":[]},{"text":"impl Clone for DwAt","synthetic":false,"types":[]},{"text":"impl Clone for DwForm","synthetic":false,"types":[]},{"text":"impl Clone for DwAte","synthetic":false,"types":[]},{"text":"impl Clone for DwLle","synthetic":false,"types":[]},{"text":"impl Clone for DwDs","synthetic":false,"types":[]},{"text":"impl Clone for DwEnd","synthetic":false,"types":[]},{"text":"impl Clone for DwAccess","synthetic":false,"types":[]},{"text":"impl Clone for DwVis","synthetic":false,"types":[]},{"text":"impl Clone for DwVirtuality","synthetic":false,"types":[]},{"text":"impl Clone for DwLang","synthetic":false,"types":[]},{"text":"impl Clone for DwAddr","synthetic":false,"types":[]},{"text":"impl Clone for DwId","synthetic":false,"types":[]},{"text":"impl Clone for DwCc","synthetic":false,"types":[]},{"text":"impl Clone for DwInl","synthetic":false,"types":[]},{"text":"impl Clone for DwOrd","synthetic":false,"types":[]},{"text":"impl Clone for DwDsc","synthetic":false,"types":[]},{"text":"impl Clone for DwIdx","synthetic":false,"types":[]},{"text":"impl Clone for DwDefaulted","synthetic":false,"types":[]},{"text":"impl Clone for DwLns","synthetic":false,"types":[]},{"text":"impl Clone for DwLne","synthetic":false,"types":[]},{"text":"impl Clone for DwLnct","synthetic":false,"types":[]},{"text":"impl Clone for DwMacro","synthetic":false,"types":[]},{"text":"impl Clone for DwRle","synthetic":false,"types":[]},{"text":"impl Clone for DwOp","synthetic":false,"types":[]},{"text":"impl Clone for DwEhPe","synthetic":false,"types":[]},{"text":"impl Clone for RunTimeEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAddr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ParsedEhFrameHdr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for EhHdrTable&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for EhFrame&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BaseAddresses","synthetic":false,"types":[]},{"text":"impl Clone for SectionBaseAddresses","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CfiEntriesIter&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for CieOrFde&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Augmentation","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CommonInformationEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'bases, Section:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for PartialFrameDescriptionEntry&lt;'bases, Section, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section: UnwindSection&lt;R&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Section::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FrameDescriptionEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UninitializedUnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindContext&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'iter, R:&nbsp;Clone&gt; Clone for RegisterRuleIter&lt;'iter, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for UnwindTableRow&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CfaRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RegisterRule&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstruction&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;Clone + Reader&gt; Clone for CallFrameInstructionIter&lt;'a, R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Pointer","synthetic":false,"types":[]},{"text":"impl&lt;'input, Endian:&nbsp;Clone&gt; Clone for EndianSlice&lt;'input, Endian&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: Endianity,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ReaderOffsetId","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugAbbrev&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviations","synthetic":false,"types":[]},{"text":"impl Clone for Abbreviation","synthetic":false,"types":[]},{"text":"impl Clone for AttributeSpecification","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Copy&gt; Clone for ArangeEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugAranges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for ArangeEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLine&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Program:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineRows&lt;R, Program, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Program: LineProgram&lt;R, Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineInstruction&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineInstructions&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LineRow","synthetic":false,"types":[]},{"text":"impl Clone for ColumnType","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LineSequence&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for LineProgramHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for IncompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompleteLineProgram&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for FileEntry&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for FileEntryFormat","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLoc&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLocLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for LocationLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for RawLocListEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for LocationListEntry&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for DieReference&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Operation&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Location&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for Piece&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Expression&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for OperationIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubNames&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubNamesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntry&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for DebugPubTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for PubTypesEntryIter&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRanges&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugRngLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for RangeLists&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawRngListEntry&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Range","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugStrOffsets&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugLineStr&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for UnitOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugInfo&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for CompilationUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for CompilationUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for UnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for DebuggingInformationEntry&lt;'abbrev, 'unit, R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for AttributeValue&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for Attribute&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'entry, 'unit, R:&nbsp;Clone + Reader&gt; Clone for AttrsIter&lt;'abbrev, 'entry, 'unit, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesRaw&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesCursor&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'abbrev, 'unit, R:&nbsp;Clone&gt; Clone for EntriesTree&lt;'abbrev, 'unit, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for DebugTypes&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Reader&gt; Clone for TypeUnitHeadersIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone, Offset:&nbsp;Clone&gt; Clone for TypeUnitHeader&lt;R, Offset&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Reader&lt;Offset = Offset&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Offset: ReaderOffset,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ValueType","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl Clone for Reason","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;B&gt; Clone for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for StreamId","synthetic":false,"types":[]},{"text":"impl Clone for FlowControl","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HeaderMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HeaderName","synthetic":false,"types":[]},{"text":"impl Clone for HeaderValue","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl Clone for StatusCode","synthetic":false,"types":[]},{"text":"impl Clone for Authority","synthetic":false,"types":[]},{"text":"impl Clone for PathAndQuery","synthetic":false,"types":[]},{"text":"impl Clone for Scheme","synthetic":false,"types":[]},{"text":"impl Clone for Uri","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl Clone for SizeHint","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Name","synthetic":false,"types":[]},{"text":"impl Clone for GaiResolver","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for HttpConnector&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HttpInfo","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Clone, B&gt; Clone for Client&lt;C, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone&gt; Clone for Http&lt;E&gt;","synthetic":false,"types":[]}];
implementors["hyper_tls"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HttpsConnector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ident_case"] = [{"text":"impl Clone for RenameRule","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2, '_&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["ipnet"] = [{"text":"impl Clone for IpAddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6AddrRange","synthetic":false,"types":[]},{"text":"impl Clone for IpNet","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Net","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Net","synthetic":false,"types":[]},{"text":"impl Clone for PrefixLenError","synthetic":false,"types":[]},{"text":"impl Clone for IpSubnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv4Subnets","synthetic":false,"types":[]},{"text":"impl Clone for Ipv6Subnets","synthetic":false,"types":[]},{"text":"impl Clone for AddrParseError","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["libz_sys"] = [{"text":"impl Clone for gz_header","synthetic":false,"types":[]},{"text":"impl Clone for z_stream","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["lzma_sys"] = [{"text":"impl Clone for lzma_options_lzma","synthetic":false,"types":[]}];
implementors["md5"] = [{"text":"impl Clone for Md5","synthetic":false,"types":[]}];
implementors["mime"] = [{"text":"impl Clone for Mime","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Name&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Clone for MimeGuess","synthetic":false,"types":[]},{"text":"impl Clone for Iter","synthetic":false,"types":[]},{"text":"impl Clone for IterRaw","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Clone for PollOpt","synthetic":false,"types":[]},{"text":"impl Clone for Ready","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for SetReadiness","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnixReady","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]}];
implementors["native_tls"] = [{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]},{"text":"impl Clone for Protocol","synthetic":false,"types":[]},{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]},{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_bigint_dig"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for UniformBigUint","synthetic":false,"types":[]},{"text":"impl Clone for UniformBigInt","synthetic":false,"types":[]},{"text":"impl Clone for RandomBits","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeFrom&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepFrom&lt;A&gt;","synthetic":false,"types":[]}];
implementors["object"] = [{"text":"impl Clone for Architecture","synthetic":false,"types":[]},{"text":"impl Clone for AddressSize","synthetic":false,"types":[]},{"text":"impl Clone for BinaryFormat","synthetic":false,"types":[]},{"text":"impl Clone for SectionKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolKind","synthetic":false,"types":[]},{"text":"impl Clone for SymbolScope","synthetic":false,"types":[]},{"text":"impl Clone for RelocationKind","synthetic":false,"types":[]},{"text":"impl Clone for RelocationEncoding","synthetic":false,"types":[]},{"text":"impl Clone for FileFlags","synthetic":false,"types":[]},{"text":"impl Clone for SectionFlags","synthetic":false,"types":[]},{"text":"impl&lt;Section:&nbsp;Clone&gt; Clone for SymbolFlags&lt;Section&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Endianness","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]},{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for U64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I16Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I32Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for I64Bytes&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Bytes&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for StringTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for SectionTable&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SectionTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::SectionHeader: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Elf:&nbsp;Clone + FileHeader&gt; Clone for SymbolTable&lt;'data, Elf&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Elf::Sym: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'data, Mach:&nbsp;Clone + MachHeader&gt; Clone for SymbolTable&lt;'data, Mach&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Mach::Nlist: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for SectionIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolIndex","synthetic":false,"types":[]},{"text":"impl Clone for SymbolSection","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for Symbol&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationTarget","synthetic":false,"types":[]},{"text":"impl&lt;'data&gt; Clone for CompressedData&lt;'data&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompressionFormat","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FileHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SectionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for CompressionHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Sym64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Syminfo64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rel64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Rela64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ProgramHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dyn64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FatHeader","synthetic":false,"types":[]},{"text":"impl Clone for FatArch32","synthetic":false,"types":[]},{"text":"impl Clone for FatArch64","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for MachHeader64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LoadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LcStr&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SegmentCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Section64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Fvmlib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmlibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Dylib&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubFrameworkCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubClientCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubUmbrellaCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SubLibraryCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PreboundDylibCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylinkerCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for ThreadCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RoutinesCommand_64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DysymtabCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibTableOfContents&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibModule64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DylibReference&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHintsCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for TwolevelHint&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for PrebindCksumCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for UuidCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for RpathCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkeditDataCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EncryptionInfoCommand64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for VersionMinCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for BuildToolVersion&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DyldInfoCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for LinkerOptionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SymSegCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for IdentCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for FvmfileCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for EntryPointCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for SourceVersionCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for DataInCodeEntry&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for NoteCommand&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist32&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Nlist64&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Clone + Endian&gt; Clone for Relocation&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ScatteredRelocationInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageDosHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOs2Header","synthetic":false,"types":[]},{"text":"impl Clone for ImageVxdHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageFileHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDataDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomOptionalHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageOptionalHeader64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders64","synthetic":false,"types":[]},{"text":"impl Clone for ImageNtHeaders32","synthetic":false,"types":[]},{"text":"impl Clone for ImageRomHeaders","synthetic":false,"types":[]},{"text":"impl Clone for Guid","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderV2","synthetic":false,"types":[]},{"text":"impl Clone for AnonObjectHeaderBigobj","synthetic":false,"types":[]},{"text":"impl Clone for ImageSectionHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbol","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolEx","synthetic":false,"types":[]},{"text":"impl Clone for ImageSymbolExBytes","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolTokenDef","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunction","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolFunctionBeginEnd","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolWeak","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolSection","synthetic":false,"types":[]},{"text":"impl Clone for ImageAuxSymbolCrc","synthetic":false,"types":[]},{"text":"impl Clone for ImageRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageLinenumber","synthetic":false,"types":[]},{"text":"impl Clone for ImageBaseRelocation","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchiveMemberHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageExportDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportByName","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageTlsDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundImportDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageBoundForwarderRef","synthetic":false,"types":[]},{"text":"impl Clone for ImageDelayloadDescriptor","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirectoryString","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDirStringU","synthetic":false,"types":[]},{"text":"impl Clone for ImageResourceDataEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigCodeIntegrity","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocationTable","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation32V2","synthetic":false,"types":[]},{"text":"impl Clone for ImageDynamicRelocation64V2","synthetic":false,"types":[]},{"text":"impl Clone for ImagePrologueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageEpilogueDynamicRelocationHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory32","synthetic":false,"types":[]},{"text":"impl Clone for ImageLoadConfigDirectory64","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchBase","synthetic":false,"types":[]},{"text":"impl Clone for ImageHotPatchHashes","synthetic":false,"types":[]},{"text":"impl Clone for ImageArmRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageArm64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlpha64RuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageAlphaRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageRuntimeFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig32","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveConfig64","synthetic":false,"types":[]},{"text":"impl Clone for ImageEnclaveImport","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugDirectory","synthetic":false,"types":[]},{"text":"impl Clone for ImageCoffSymbolsHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageDebugMisc","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImageFunctionEntry64","synthetic":false,"types":[]},{"text":"impl Clone for ImageSeparateDebugHeader","synthetic":false,"types":[]},{"text":"impl Clone for NonPagedDebugInfo","synthetic":false,"types":[]},{"text":"impl Clone for ImageArchitectureEntry","synthetic":false,"types":[]},{"text":"impl Clone for ImportObjectHeader","synthetic":false,"types":[]},{"text":"impl Clone for ImageCor20Header","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["openssl"] = [{"text":"impl Clone for TimeDiff","synthetic":false,"types":[]},{"text":"impl Clone for CMSOptions","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Dsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PointConversionForm","synthetic":false,"types":[]},{"text":"impl Clone for Asn1Flag","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for EcKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ErrorStack","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T, U&gt; Clone for Index&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for MessageDigest","synthetic":false,"types":[]},{"text":"impl Clone for Hasher","synthetic":false,"types":[]},{"text":"impl Clone for DigestBytes","synthetic":false,"types":[]},{"text":"impl Clone for Nid","synthetic":false,"types":[]},{"text":"impl Clone for OcspFlag","synthetic":false,"types":[]},{"text":"impl Clone for OcspResponseStatus","synthetic":false,"types":[]},{"text":"impl Clone for OcspCertStatus","synthetic":false,"types":[]},{"text":"impl Clone for OcspRevokedStatus","synthetic":false,"types":[]},{"text":"impl Clone for KeyIvPair","synthetic":false,"types":[]},{"text":"impl Clone for Pkcs7Flags","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for PKey&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Padding","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Rsa&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Sha1","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for SrtpProfileId","synthetic":false,"types":[]},{"text":"impl Clone for SslConnector","synthetic":false,"types":[]},{"text":"impl Clone for SslAcceptor","synthetic":false,"types":[]},{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for SslOptions","synthetic":false,"types":[]},{"text":"impl Clone for SslMode","synthetic":false,"types":[]},{"text":"impl Clone for SslMethod","synthetic":false,"types":[]},{"text":"impl Clone for SslVerifyMode","synthetic":false,"types":[]},{"text":"impl Clone for SslSessionCacheMode","synthetic":false,"types":[]},{"text":"impl Clone for ExtensionContext","synthetic":false,"types":[]},{"text":"impl Clone for SslFiletype","synthetic":false,"types":[]},{"text":"impl Clone for StatusType","synthetic":false,"types":[]},{"text":"impl Clone for NameType","synthetic":false,"types":[]},{"text":"impl Clone for SniError","synthetic":false,"types":[]},{"text":"impl Clone for SslAlert","synthetic":false,"types":[]},{"text":"impl Clone for AlpnError","synthetic":false,"types":[]},{"text":"impl Clone for ClientHelloResponse","synthetic":false,"types":[]},{"text":"impl Clone for SslVersion","synthetic":false,"types":[]},{"text":"impl Clone for SslContext","synthetic":false,"types":[]},{"text":"impl Clone for SslSession","synthetic":false,"types":[]},{"text":"impl Clone for ShutdownResult","synthetic":false,"types":[]},{"text":"impl Clone for ShutdownState","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for Cipher","synthetic":false,"types":[]},{"text":"impl Clone for X509CheckFlags","synthetic":false,"types":[]},{"text":"impl Clone for X509","synthetic":false,"types":[]},{"text":"impl Clone for X509VerifyResult","synthetic":false,"types":[]}];
implementors["openssl_sys"] = [{"text":"impl Clone for point_conversion_form_t","synthetic":false,"types":[]},{"text":"impl Clone for SHA_CTX","synthetic":false,"types":[]},{"text":"impl Clone for SHA256_CTX","synthetic":false,"types":[]},{"text":"impl Clone for SHA512_CTX","synthetic":false,"types":[]}];
implementors["pem"] = [{"text":"impl Clone for LineEnding","synthetic":false,"types":[]},{"text":"impl Clone for EncodeConfig","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Clone for PercentEncode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["pgp"] = [{"text":"impl Clone for BlockType","synthetic":false,"types":[]},{"text":"impl Clone for PKCS1Type","synthetic":false,"types":[]},{"text":"impl Clone for SecretKeyParamsBuilder","synthetic":false,"types":[]},{"text":"impl Clone for SubkeyParams","synthetic":false,"types":[]},{"text":"impl Clone for SubkeyParamsBuilder","synthetic":false,"types":[]},{"text":"impl Clone for KeyType","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for PublicSubkey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretSubkey","synthetic":false,"types":[]},{"text":"impl Clone for KeyDetails","synthetic":false,"types":[]},{"text":"impl Clone for Message","synthetic":false,"types":[]},{"text":"impl Clone for Esk","synthetic":false,"types":[]},{"text":"impl Clone for Edata","synthetic":false,"types":[]},{"text":"impl Clone for SignedPublicKey","synthetic":false,"types":[]},{"text":"impl Clone for SignedPublicSubKey","synthetic":false,"types":[]},{"text":"impl Clone for SignedSecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SignedSecretSubKey","synthetic":false,"types":[]},{"text":"impl Clone for SignedKeyDetails","synthetic":false,"types":[]},{"text":"impl Clone for PublicOrSecret","synthetic":false,"types":[]},{"text":"impl Clone for StandaloneSignature","synthetic":false,"types":[]},{"text":"impl Clone for AeadAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for ECCCurve","synthetic":false,"types":[]},{"text":"impl Clone for HashAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for PublicKeyAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for SymmetricKeyAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for LineBreak","synthetic":false,"types":[]},{"text":"impl Clone for CompressedData","synthetic":false,"types":[]},{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for PublicSubkey","synthetic":false,"types":[]},{"text":"impl Clone for SecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SecretSubkey","synthetic":false,"types":[]},{"text":"impl Clone for LiteralData","synthetic":false,"types":[]},{"text":"impl Clone for DataMode","synthetic":false,"types":[]},{"text":"impl Clone for Marker","synthetic":false,"types":[]},{"text":"impl Clone for ModDetectionCode","synthetic":false,"types":[]},{"text":"impl Clone for OnePassSignature","synthetic":false,"types":[]},{"text":"impl Clone for PublicKeyEncryptedSessionKey","synthetic":false,"types":[]},{"text":"impl Clone for SignatureConfig","synthetic":false,"types":[]},{"text":"impl Clone for SignatureConfigBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for SignatureVersion","synthetic":false,"types":[]},{"text":"impl Clone for SignatureType","synthetic":false,"types":[]},{"text":"impl Clone for SubpacketType","synthetic":false,"types":[]},{"text":"impl Clone for Subpacket","synthetic":false,"types":[]},{"text":"impl Clone for KeyFlags","synthetic":false,"types":[]},{"text":"impl Clone for Notation","synthetic":false,"types":[]},{"text":"impl Clone for RevocationCode","synthetic":false,"types":[]},{"text":"impl Clone for SymEncryptedData","synthetic":false,"types":[]},{"text":"impl Clone for SymEncryptedProtectedData","synthetic":false,"types":[]},{"text":"impl Clone for SymKeyEncryptedSessionKey","synthetic":false,"types":[]},{"text":"impl Clone for UserAttribute","synthetic":false,"types":[]},{"text":"impl Clone for UserId","synthetic":false,"types":[]},{"text":"impl Clone for CompressionAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for KeyId","synthetic":false,"types":[]},{"text":"impl Clone for Mpi","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for MpiRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Packet","synthetic":false,"types":[]},{"text":"impl Clone for PacketLength","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for KeyVersion","synthetic":false,"types":[]},{"text":"impl Clone for EncryptedSecretParams","synthetic":false,"types":[]},{"text":"impl Clone for PlainSecretParams","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PlainSecretParamsRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for PublicParams","synthetic":false,"types":[]},{"text":"impl Clone for SecretParams","synthetic":false,"types":[]},{"text":"impl Clone for RevocationKey","synthetic":false,"types":[]},{"text":"impl Clone for RevocationKeyClass","synthetic":false,"types":[]},{"text":"impl Clone for StringToKey","synthetic":false,"types":[]},{"text":"impl Clone for StringToKeyType","synthetic":false,"types":[]},{"text":"impl Clone for ECDHSecretKey","synthetic":false,"types":[]},{"text":"impl Clone for EdDSASecretKey","synthetic":false,"types":[]},{"text":"impl Clone for DSASecretKey","synthetic":false,"types":[]},{"text":"impl Clone for SignedUser","synthetic":false,"types":[]},{"text":"impl Clone for SignedUserAttribute","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["pulldown_cmark"] = [{"text":"impl&lt;'a&gt; Clone for CodeBlockKind&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Tag&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for LinkType","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Event&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Alignment","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Parser&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InlineStr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for CowStr&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["reqwest"] = [{"text":"impl Clone for Client","synthetic":false,"types":[]},{"text":"impl Clone for Client","synthetic":false,"types":[]},{"text":"impl Clone for Proxy","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]}];
implementors["retry"] = [{"text":"impl&lt;T:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for OperationResult&lt;T, E&gt;","synthetic":false,"types":[]}];
implementors["ripemd160"] = [{"text":"impl Clone for Ripemd160","synthetic":false,"types":[]}];
implementors["rsa"] = [{"text":"impl Clone for Hash","synthetic":false,"types":[]},{"text":"impl Clone for RSAPublicKey","synthetic":false,"types":[]},{"text":"impl Clone for RSAPrivateKey","synthetic":false,"types":[]}];
implementors["rustc_demangle"] = [{"text":"impl Clone for TryDemangleError","synthetic":false,"types":[]}];
implementors["rustup"] = [{"text":"impl Clone for SelfUpdatePermission","synthetic":false,"types":[]},{"text":"impl Clone for CompletionCommand","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn HomeProcess + 'static&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn CurrentProcess + 'static&gt;","synthetic":false,"types":[]},{"text":"impl Clone for OSProcess","synthetic":false,"types":[]},{"text":"impl Clone for TestProcess","synthetic":false,"types":[]},{"text":"impl Clone for Components","synthetic":false,"types":[]},{"text":"impl Clone for Component","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for PartialToolchainDesc","synthetic":false,"types":[]},{"text":"impl Clone for PartialTargetTriple","synthetic":false,"types":[]},{"text":"impl Clone for ToolchainDesc","synthetic":false,"types":[]},{"text":"impl Clone for TargetTriple","synthetic":false,"types":[]},{"text":"impl Clone for Profile","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DownloadCfg&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Manifest","synthetic":false,"types":[]},{"text":"impl Clone for Package","synthetic":false,"types":[]},{"text":"impl Clone for PackageTargets","synthetic":false,"types":[]},{"text":"impl Clone for TargetedPackage","synthetic":false,"types":[]},{"text":"impl Clone for PackageBins","synthetic":false,"types":[]},{"text":"impl Clone for Component","synthetic":false,"types":[]},{"text":"impl Clone for InstallPrefix","synthetic":false,"types":[]},{"text":"impl Clone for FallbackSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for InstallMethod&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SettingsFile","synthetic":false,"types":[]},{"text":"impl Clone for Settings","synthetic":false,"types":[]},{"text":"impl Clone for RustupHome","synthetic":false,"types":[]},{"text":"impl Clone for UpdateStatus","synthetic":false,"types":[]},{"text":"impl Clone for Unit","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["semver"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for SemVerError","synthetic":false,"types":[]},{"text":"impl Clone for VersionReq","synthetic":false,"types":[]},{"text":"impl Clone for ReqParseError","synthetic":false,"types":[]}];
implementors["semver_parser"] = [{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for Identifier","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["sha1"] = [{"text":"impl Clone for Sha1","synthetic":false,"types":[]}];
implementors["sha2"] = [{"text":"impl Clone for Sha256","synthetic":false,"types":[]},{"text":"impl Clone for Sha224","synthetic":false,"types":[]},{"text":"impl Clone for Sha512","synthetic":false,"types":[]},{"text":"impl Clone for Sha384","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc256","synthetic":false,"types":[]},{"text":"impl Clone for Sha512Trunc224","synthetic":false,"types":[]}];
implementors["sha3"] = [{"text":"impl Clone for Keccak224","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256","synthetic":false,"types":[]},{"text":"impl Clone for Keccak384","synthetic":false,"types":[]},{"text":"impl Clone for Keccak512","synthetic":false,"types":[]},{"text":"impl Clone for Keccak256Full","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_224","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_256","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_384","synthetic":false,"types":[]},{"text":"impl Clone for Sha3_512","synthetic":false,"types":[]},{"text":"impl Clone for Shake128","synthetic":false,"types":[]},{"text":"impl Clone for Shake256","synthetic":false,"types":[]}];
implementors["simple_asn1"] = [{"text":"impl Clone for ASN1Class","synthetic":false,"types":[]},{"text":"impl Clone for ASN1Block","synthetic":false,"types":[]},{"text":"impl Clone for OID","synthetic":false,"types":[]},{"text":"impl Clone for ASN1DecodeErr","synthetic":false,"types":[]},{"text":"impl Clone for ASN1EncodeErr","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Slab&lt;T&gt;","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Clone&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["socket2"] = [{"text":"impl Clone for Domain","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Protocol","synthetic":false,"types":[]}];
implementors["stream_cipher"] = [{"text":"impl Clone for LoopError","synthetic":false,"types":[]},{"text":"impl Clone for InvalidKeyNonceLength","synthetic":false,"types":[]}];
implementors["subtle"] = [{"text":"impl Clone for Choice","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CtOption&lt;T&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Clone for AddBounds","synthetic":false,"types":[]},{"text":"impl Clone for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BindingInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantAst&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for VariantInfo&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Structure&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["tar"] = [{"text":"impl Clone for EntryType","synthetic":false,"types":[]},{"text":"impl Clone for HeaderMode","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl&lt;'a, 'b&gt; Clone for Builder&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["term"] = [{"text":"impl Clone for TermInfo","synthetic":false,"types":[]},{"text":"impl Clone for Param","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TerminfoTerminal&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Attr","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["threadpool"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for ThreadPool","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Clone for Timespec","synthetic":false,"types":[]},{"text":"impl Clone for PreciseTime","synthetic":false,"types":[]},{"text":"impl Clone for SteadyTime","synthetic":false,"types":[]},{"text":"impl Clone for Tm","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone + Array&gt; Clone for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl Clone for Handle","synthetic":false,"types":[]},{"text":"impl Clone for BarrierWaitResult","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for UnboundedSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Instant","synthetic":false,"types":[]}];
implementors["tokio_tls"] = [{"text":"impl Clone for TlsConnector","synthetic":false,"types":[]},{"text":"impl Clone for TlsAcceptor","synthetic":false,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Clone for BytesCodec","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for LinesCodec","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Datetime","synthetic":false,"types":[]},{"text":"impl Clone for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl Clone for Span","synthetic":false,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Clone for Identifier","synthetic":false,"types":[]},{"text":"impl Clone for Dispatch","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Display&gt; Clone for DisplayValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Debug&gt; Clone for DebugValue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for Kind","synthetic":false,"types":[]},{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl Clone for ParseLevelFilterError","synthetic":false,"types":[]},{"text":"impl Clone for Id","synthetic":false,"types":[]},{"text":"impl Clone for Interest","synthetic":false,"types":[]}];
implementors["try_from"] = [{"text":"impl Clone for TryFromIntToCharError","synthetic":false,"types":[]},{"text":"impl Clone for TryFromIntError","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Clone for B0","synthetic":false,"types":[]},{"text":"impl Clone for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Z0","synthetic":false,"types":[]},{"text":"impl Clone for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Greater","synthetic":false,"types":[]},{"text":"impl Clone for Less","synthetic":false,"types":[]},{"text":"impl Clone for Equal","synthetic":false,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for UniCase&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Ascii&lt;S&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for BidiClass","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueOrigin","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Url","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
implementors["want"] = [{"text":"impl Clone for SharedGiver","synthetic":false,"types":[]}];
implementors["x25519_dalek"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl Clone for StaticSecret","synthetic":false,"types":[]}];
implementors["xattr"] = [{"text":"impl Clone for UnsupportedPlatformError","synthetic":false,"types":[]},{"text":"impl Clone for XAttrs","synthetic":false,"types":[]}];
implementors["xz2"] = [{"text":"impl Clone for Action","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Check","synthetic":false,"types":[]},{"text":"impl Clone for Mode","synthetic":false,"types":[]},{"text":"impl Clone for MatchFinder","synthetic":false,"types":[]}];
implementors["zeroize"] = [{"text":"impl&lt;Z:&nbsp;Clone + Zeroize&gt; Clone for Zeroizing&lt;Z&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()